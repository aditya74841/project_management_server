openapi: 3.0.3
info:
  title: Project Management SaaS API
  description: API for multi-tenant project management (Users, Companies, Projects, Features). Built with Node/Express/Mongoose.
  version: "1.0.0"
servers:
  - url: http://localhost:8080
    description: Local dev

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiError:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        errors:
          type: array
          items:
            type: object

    ApiResponse:
      type: object
      properties:
        status:
          type: integer
        data:
          type: object
        message:
          type: string

    User:
      type: object
      properties:
        _id:
          type: string
          example: "64f1234567890abcdef12345"
        name:
          type: string
        email:
          type: string
        username:
          type: string
        role:
          type: string
          example: "member"
        phoneNumber:
          type: string
        isEmailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time

    RegisterUserDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
        phoneNumber:
          type: string

    LoginDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string

    Company:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        owner:
          $ref: '#/components/schemas/User'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [active, inactive, suspended]
        domain:
          type: string
        createdAt:
          type: string
          format: date-time

    CreateCompanyDto:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        domain:
          type: string

    UpdateCompanyDto:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]

    Project:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        companyId:
          $ref: '#/components/schemas/Company'
        createdBy:
          $ref: '#/components/schemas/User'
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [draft, active, archived, completed]
        deadline:
          type: string
          format: date-time
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        isShown:
          type: boolean
        createdAt:
          type: string
          format: date-time

    CreateProjectDto:
      type: object
      required:
        - name
        - companyId
      properties:
        name:
          type: string
        description:
          type: string
        companyId:
          type: string
        deadline:
          type: string
          format: date-time
        members:
          type: array
          items:
            type: string

    UpdateProjectDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        deadline:
          type: string
          format: date-time
        status:
          type: string
          enum: [draft, active, archived, completed]

    Feature:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, working, completed, blocked]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        projectId:
          $ref: '#/components/schemas/Project'
        createdBy:
          $ref: '#/components/schemas/User'
        assignedTo:
          type: array
          items:
            $ref: '#/components/schemas/User'
        deadline:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        comments:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              text:
                type: string
              createdBy:
                $ref: '#/components/schemas/User'
              createdAt:
                type: string
                format: date-time
        isCompleted:
          type: boolean
        createdAt:
          type: string
          format: date-time

    CreateFeatureDto:
      type: object
      required:
        - title
        - projectId
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [low, medium, high, urgent]
        projectId:
          type: string
        deadline:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    UpdateFeatureDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, working, completed, blocked]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        deadline:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    AssignUsersDto:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: string

    RemoveUserDto:
      type: object
      properties:
        userId:
          type: string

    AddCommentDto:
      type: object
      properties:
        text:
          type: string

paths:
  /api/v1/users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDto'
      responses:
        '201':
          description: User created and verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '409':
          description: Conflict - user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/v1/users/login:
    post:
      tags: [Users]
      summary: Login user (returns JWT)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/v1/users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # ---------- Company routes ----------
  /api/v1/companies:
    post:
      tags: [Companies]
      summary: Create a new company
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyDto'
      responses:
        '201':
          description: Company created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    get:
      tags: [Companies]
      summary: Get list of all companies (superAdmin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Companies list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/companies/{companyId}:
    parameters:
      - in: path
        name: companyId
        required: true
        schema:
          type: string
    get:
      tags: [Companies]
      summary: Get company by id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Company fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Not found
    patch:
      tags: [Companies]
      summary: Update company
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompanyDto'
      responses:
        '200':
          description: Company updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
    delete:
      tags: [Companies]
      summary: Delete company
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Company deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden

  # ---------- Project routes ----------
  /api/v1/projects:
    post:
      tags: [Projects]
      summary: Create project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDto'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/projects/{projectId}:
    parameters:
      - in: path
        name: projectId
        required: true
        schema:
          type: string
    get:
      tags: [Projects]
      summary: Get project by id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Not found
    patch:
      tags: [Projects]
      summary: Update project
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectDto'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags: [Projects]
      summary: Delete project
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/projects/{projectId}/toggle-visibility:
    patch:
      tags: [Projects]
      summary: Toggle project's isShown flag
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toggled visibility
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/projects/{projectId}/members:
    post:
      tags: [Projects]
      summary: Add member to project
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: Member added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags: [Projects]
      summary: Remove member from project
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: Member removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/projects/{projectId}/features:
    post:
      tags: [Projects]
      summary: Assign feature (featureId) to project
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - featureId
              properties:
                featureId:
                  type: string
      responses:
        '200':
          description: Feature assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags: [Projects]
      summary: Unassign feature from project
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - featureId
              properties:
                featureId:
                  type: string
      responses:
        '200':
          description: Feature unassigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # ---------- Feature routes ----------
  /api/v1/features:
    post:
      tags: [Features]
      summary: Create feature
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureDto'
      responses:
        '201':
          description: Feature created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/features/{featureId}:
    parameters:
      - in: path
        name: featureId
        required: true
        schema:
          type: string
    get:
      tags: [Features]
      summary: Get feature by id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Feature fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    patch:
      tags: [Features]
      summary: Update feature
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeatureDto'
      responses:
        '200':
          description: Feature updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags: [Features]
      summary: Delete feature
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Feature deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/features/{featureId}/assign-users:
    post:
      tags: [Features]
      summary: Assign multiple users to feature
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: featureId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUsersDto'
      responses:
        '200':
          description: Users assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/features/{featureId}/remove-user:
    post:
      tags: [Features]
      summary: Remove user from feature
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: featureId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveUserDto'
      responses:
        '200':
          description: User removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/features/{featureId}/add-comment:
    post:
      tags: [Features]
      summary: Add comment to feature
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: featureId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentDto'
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/features/{featureId}/comments/{commentId}:
    delete:
      tags: [Features]
      summary: Remove comment from feature
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: featureId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/features/{featureId}/toggle-completion:
    patch:
      tags: [Features]
      summary: Toggle feature completion
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: featureId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toggled completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/features/project/{projectId}:
    get:
      tags: [Features]
      summary: Get features by project id (supports filters & sort)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, working, completed, blocked]
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - in: query
          name: isCompleted
          schema:
            type: boolean
        - in: query
          name: sortBy
          schema:
            type: string
            default: createdAt
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Features list for project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

security:
  - BearerAuth: []
tags:
  - name: Users
    description: User registration, login and profile
  - name: Companies
    description: Manage companies (superAdmin)
  - name: Projects
    description: Project CRUD and project-level actions
  - name: Features
    description: Feature/task CRUD and related actions
